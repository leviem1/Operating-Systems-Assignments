1:1:* trace1-3.txt - simple trace file maps 1 page, no faults or exceptions should occur.
2:1:*   Mismatches and other errors should occur only as indicated in the comments.
3:1:*   Print output should exactly match sample output.
4:1:1       quota
5:1:* Cause page to be allocated
6:1:2340002 set ab
7:1:* Print out start of range (should be all 0)
8:1:2340000 print 10
2340000: 00 00 ab 00 00 00 00 00 00 00 00 00 00 00 00 00
9:1:* Make sure allocated page is cleared to 0 by checking scattered blocks of bytes
10:1:2340002 set 00
1:2:* trace2-3_multi-page.txt
2:2:*   Allocates 2 disjoint groups of pages.  No fault or exceptions should occur.
3:2:*   Mismatches and other errors should occur only as indicated in the comments.
4:2:3       quota
5:2:660000  set  00
6:2:667fff  set  00
7:2:66b000  set  00
1:3:* trace3-3_edge-addr.txt
2:3:* Simple test of access to first/last pages in address space. 
3:3:* No faults or exceptions or mismatches should occur.
4:3:2       quota
5:3:000000  set 00
6:3:3ffcfff set 00
7:3:* Make sure allocated pages are cleared to 0 by checking scattered blocks of bytes
8:3:000000  print 10
0000000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
11:1:2342000 cmp 2340000 10 
12:1:2343ff0 cmp 2342000 10
13:1:* Fill entire page with different value and check again
14:1:2340000 fill e3 4000
15:1:2340000 print 10
2340000: e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3 e3
8:2:* Spot check pages cleared to 0
9:2:660000   print 10 
0660000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
10:2:664000   cmp  660000 10  
11:2:668000   cmp  660000 10  
12:2:66bff0   cmp  668000 10  
9:3:3fffff0 print 10
3fffff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
10:3:002000  cmp  000000 10
11:3:003ff0  cmp  000000 10
12:3:3ffc000 cmp  000000 10
16:1:2340000 cmp 2342000 10 
17:1:2343ff0 cmp 2342000 10
18:1:* Store some values and compare
19:1:2341e01 set b1 b2 b3 b4 b5
20:1:2341e02 set c2
13:2:* Fill all 3 pages with preset value
14:2:660000   fill 42 c000
15:2:* Store and check some data
16:2:663ff8   set  d0  d1  d2  d3  d4  d5  d6  d7  d8  d9  da  db  dc  dd  de  df
17:2:667ff8   set  d0  d1  d2  d3  d4  d5  d6  d7  d8  d9  da  db  dc  dd  de  df 
18:2:667ff7   cmp 663ff7 12
13:3:3ffe000 cmp  000000 10
14:3:* Fill entire pages
15:3:000000  fill 01 4000
16:3:3ffc000 fill 02 4000
17:3:* Try storing some values
18:3:0000000 set ab cd ef 01 02 03 04 05
21:1:2341e00 print 7
2341e00: e3 b1 c2 b3 b4 b5 e3
22:1:2342af1 set b1 c2 b3 b4 b5
23:1:2341e00 cmp 2342af0 10
24:1:* Another fill
25:1:2341e02 fill 55 3
19:2:663ff0   print 20
0663ff0: 42 42 42 42 42 42 42 42 d0 d1 d2 d3 d4 d5 d6 d7
0664000: d8 d9 da db dc dd de df 42 42 42 42 42 42 42 42
20:2:
21:2:* Allocate more pages
22:2:7       quota
23:2:166000f set ab
24:2:166c00f set ab
19:3:3fffff8 set ab cd ef 01 02 03 04 05
20:3:3fffff8 cmp 0000000 8
21:3:3fffff0 print 10
3fffff0: 02 02 02 02 02 02 02 02 ab cd ef 01 02 03 04 05
22:3:0003ff0 set 09 08 07 06 05 04 03 02 01 00 aa bb cc dd ee ff
26:1:2342af2 set 55 55 55
27:1:2341e00 cmp 2342af0 10
28:1:* The following should generate a mismatch on the 2nd and 4th bytes
29:1:2342af2 set aa 55 bb
30:1:2342af0 cmp 2341e00 10
cmp error, addr1 = 2342af2, value = aa, addr2 = 2341e02, value = 55
cmp error, addr1 = 2342af4, value = bb, addr2 = 2341e04, value = 55
25:2:166400f set ab
26:2:166800f set ab
27:2:* Spot check pages cleared to 0 except for single byte written
28:2:1660000 print 10
1660000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ab
29:2:* Each cmp should have a single mismatch comparing 00 to ab
30:2:1660000 cmp 166fff0 10
cmp error, addr1 = 166000f, value = ab, addr2 = 166ffff, value = 00
23:3:3ffc008 set 01 00 aa bb cc dd ee ff
24:3:3ffc000 set 09 08 07 06 05 04 03 02
25:3:0003ff0 cmp 3ffc000 10
26:3:0003ff0 print 10
0003ff0: 09 08 07 06 05 04 03 02 01 00 aa bb cc dd ee ff
31:1:* Test dup
32:1:2343000 set c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf
33:1:2343000 dup 2343800 10
34:1:2343800 print 10
2343800: c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf
35:1:23437ff cmp 2342fff 12
31:2:1664000 cmp 166fff0 10
cmp error, addr1 = 166400f, value = ab, addr2 = 166ffff, value = 00
32:2:1668000 cmp 166fff0 10
cmp error, addr1 = 166800f, value = ab, addr2 = 166ffff, value = 00
33:2:166c000 cmp 166fff0 10
cmp error, addr1 = 166c00f, value = ab, addr2 = 166ffff, value = 00
34:2:
35:2:* Test fill, and copy from original pages to new pages
36:2:663ff8  dup 1663ff0 10
27:3:0000000 print 10
0000000: ab cd ef 01 02 03 04 05 01 01 01 01 01 01 01 01
28:3:* end of trace
28:3:TERMINATED, free page frames = 74
36:1:* end of trace
36:1:TERMINATED, free page frames = 76
37:2:667ff8  cmp 1663ff0 10
38:2:1669000 fill 70 1000
39:2:1669000 dup  66a000  1000
40:2:66a000  cmp  1669000 1000
41:2:66a800  fill 07 800
42:2:1669800 fill 07 800
43:2:66a000  cmp  1669000 1000
44:2:66a7f8  print 10
066a7f8: 70 70 70 70 70 70 70 70 07 07 07 07 07 07 07 07
45:2:16697f9 print 10
16697f9: 70 70 70 70 70 70 70 07 07 07 07 07 07 07 07 07
46:2:
47:2:* The following line tests that cmp will generate errors on mismatches.
48:2:* There should be two mismatched bytes.  These should be the only cmp errors
49:2:* in this file except where indicated above.
50:2:1663ff4 set 04
51:2:1663ffe set 0e
52:2:1663ff0 cmp 663ff8 10
cmp error, addr1 = 1663ff4, value = 04, addr2 = 0663ffc, value = d4
cmp error, addr1 = 1663ffe, value = 0e, addr2 = 0664006, value = de
53:2:* end of trace
53:2:TERMINATED, free page frames = 7e
